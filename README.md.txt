# Projeto: Jogo de Adivinha√ß√£o com Arquitetura Serverless na AWS

Este reposit√≥rio documenta a cria√ß√£o e implementa√ß√£o de uma aplica√ß√£o web interativa, o "Jogo de Adivinha√ß√£o", utilizando uma arquitetura 100% serverless na AWS. Este projeto foi desenvolvido como parte de um laborat√≥rio pr√°tico da **Escola da Nuvem**.

**Instrutor:** Tomas Alric
**Aluno:** Artur Costa ([@arturcosta86](https://github.com/arturcosta86))

## üéØ Vis√£o Geral do Projeto

O objetivo foi construir uma aplica√ß√£o web completa, desde o backend at√© o frontend, utilizando servi√ßos gerenciados da AWS para evitar a necessidade de gerenciar servidores. A aplica√ß√£o permite que o usu√°rio tente adivinhar um n√∫mero entre 1 e 10, com o backend processando o palpite e retornando o resultado.

---

## üõ†Ô∏è Arquitetura e Servi√ßos Utilizados

A solu√ß√£o integra tr√™s servi√ßos principais da AWS de forma desacoplada:

1.  **Amazon S3:**
    * **Fun√ß√£o:** Hospedagem do website est√°tico (`index.html`).
    * **Detalhes:** O S3 foi configurado para servir o conte√∫do da aplica√ß√£o (HTML, CSS e JavaScript) publicamente na internet.

2.  **AWS Lambda:**
    * **Fun√ß√£o:** Backend da aplica√ß√£o (l√≥gica do jogo).
    * **Detalhes:** Uma fun√ß√£o Python (`lambda_function.py`) que gera um n√∫mero aleat√≥rio, recebe o palpite do usu√°rio via evento do API Gateway e retorna uma resposta em JSON.

3.  **Amazon API Gateway:**
    * **Fun√ß√£o:** Ponto de entrada (endpoint) para o backend.
    * **Detalhes:** Uma API RESTful HTTP foi criada com uma rota `GET /jogo`. Essa rota √© integrada √† fun√ß√£o Lambda, passando os par√¢metros da requisi√ß√£o e expondo a l√≥gica do backend de forma segura e gerenci√°vel. O CORS foi configurado para permitir que o frontend hospedado no S3 possa chamar a API.

![Arquitetura da Solu√ß√£o](URL_PARA_UM_DIAGRAMA_SIMPLES_SE_TIVER) ---

## üöÄ Demonstra√ß√£o

O v√≠deo abaixo mostra o site em funcionamento, com o usu√°rio interagindo e recebendo as respostas processadas pela arquitetura serverless.

https://github.com/arturcosta86/aws-serverless-guessing-game/assets/103693439/208889aa-5561-455b-80a5-87bd754b5dfd

---

## ‚úÖ Evid√™ncias da Implementa√ß√£o

A seguir est√£o as capturas de tela que comprovam a configura√ß√£o de cada componente da solu√ß√£o na AWS.

**1. Bucket S3 Criado**
* **Arquivo:** `Print - Bucket S3 - Artur Costa.jpeg`
* **Descri√ß√£o:** Cria√ß√£o do bucket `s3-website-arturcosta` para hospedar os arquivos do frontend.

![Bucket S3](Print%20-%20Bucket%20S3%20-%20Artur%20Costa.jpeg)

**2. Fun√ß√£o Lambda com a L√≥gica do Jogo**
* **Arquivo:** `Print - Fun√ß√£o Lambda - Artur Costa.jpeg`
* **Descri√ß√£o:** Configura√ß√£o da fun√ß√£o `LambdaGame-arturcosta` com o c√≥digo Python que implementa a l√≥gica do jogo.

![Fun√ß√£o Lambda](Print%20-%20Fun√ß√£o%20Lambda%20-%20Artur%20Costa.jpeg)

**3. API Gateway com a Rota `/jogo`**
* **Arquivo:** `Print - API Gateway - Artur Costa.jpeg`
* **Descri√ß√£o:** Cria√ß√£o da API e da rota `GET /jogo` para expor a fun√ß√£o Lambda ao mundo externo.

![API Gateway](Print%20-%20API%20Gateway%20-%20Artur%20Costa.jpeg)

---

## üîß Como Replicar

1.  **Backend (Lambda):** Crie uma fun√ß√£o Lambda com runtime Python e adicione o c√≥digo do arquivo `lambda_function.py`.
2.  **API (API Gateway):** Crie uma API HTTP, adicione uma rota `GET /jogo` e integre-a com a fun√ß√£o Lambda criada no passo anterior. Configure o CORS para permitir requisi√ß√µes de qualquer origem (`*`).
3.  **Frontend (S3):**
    * Copie a URL de invoca√ß√£o da sua API Gateway.
    * Edite o arquivo `index.html` e substitua a URL da vari√°vel `url` pela sua.
    * Crie um bucket S3 com um nome √∫nico globalmente.
    * Desabilite o "Bloqueio de todo o acesso p√∫blico" nas permiss√µes do bucket.
    * Adicione uma pol√≠tica de bucket para permitir a a√ß√£o `s3:GetObject` para todos (`Principal: "*"`).
    * Habilite a "Hospedagem de site est√°tico" nas propriedades do bucket, definindo `index.html` como o documento de √≠ndice.
    * Fa√ßa o upload do arquivo `index.html` modificado para o bucket.
4.  **Acessar:** Abra o endpoint do site est√°tico do S3 em seu navegador e jogue!